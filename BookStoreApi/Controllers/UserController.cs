// <auto-generated />
using BussinessLayer.Interfaces;
using CommonLayer.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Cors;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.IdentityModel.Tokens;
using System;
using System.Collections.Generic;
using System.IdentityModel.Tokens.Jwt;
using System.Linq;
using System.Security.Claims;
using System.Text;
using System.Threading.Tasks;

namespace BookStoreApi.Controllers
{
    
    [Route("api/[controller]")]
    [ApiController]
    [EnableCors("AllowOrigin")]
    public class UserController : Controller
    {

        private readonly IUserBL _userBL;
        private readonly string _secret;
        private readonly string _issuer;
        private readonly IBookBL _bookBL;


        public UserController(IUserBL dataRepository, IConfiguration config,IBookBL _bookBL)
        {
            _userBL = dataRepository;
            _secret = config.GetSection("Jwt").GetSection("Key").Value;
            _issuer = config.GetSection("Jwt").GetSection("Issuer").Value;
            this._bookBL = _bookBL;
            
            
        }

        private List<string> GetTokenType()
        {
            string id = User.FindFirst("Id").Value;
            string type = User.FindFirst("ServiceType").Value;
            List<string> x = new List<string>();
            x.Add(id);
            x.Add(type);
            return x;
        }

        [AllowAnonymous]
        [HttpPost("Login")]
        public IActionResult Authenticate([FromBody] User model)
        {
            try
            {



                var user = _userBL.Authenticate(model.Email, model.Password);

                if (user == null)
                    return BadRequest(new { message = "Username or password is incorrect" });

                var tokenHandler = new JwtSecurityTokenHandler();
                var key = Encoding.ASCII.GetBytes(_secret);
                var tokenDescriptor = new SecurityTokenDescriptor
                {
                    Issuer = _issuer,
                    Audience = _issuer,
                    Subject = new ClaimsIdentity(new Claim[]
                    {
                     new Claim("Id", Convert.ToString(user.Id)),
                    new Claim(ClaimTypes.Email, model.Email),
                    new Claim("ServiceType", "User"),
                    }),
                    Expires = DateTime.UtcNow.AddMinutes(600),
                    SigningCredentials = new SigningCredentials(new SymmetricSecurityKey(key), SecurityAlgorithms.HmacSha256Signature)
                };
                var token = tokenHandler.CreateToken(tokenDescriptor);
                var tokenString = tokenHandler.WriteToken(token);

                // return basic user info and authentication token
                return Ok(new
                {
                    Email = user.Email,
                    Password = "*******",
                    Token = tokenString
                });
            }
            catch (Exception ex)
            {
                return this.BadRequest(new { success = false, message = ex.Message });
            }
        }


        [HttpPut("{id}/MoveToCart")]
        public IActionResult MoveToCart(string id)
        {
            if (GetTokenType()[1] != "User")
            {

                return this.BadRequest(new { success = false, message = "Only Users Allowed" });
            }


            var book = _bookBL.Get(id);

            if (book == null)
            {
                return NotFound();
            }

            _userBL.ToCart(book, Get(GetTokenType()[0]));

            return this.Ok(new { success = true, message = "Moved to Cart" });
        }

        private User Get(string Id)
        {
            var user = _userBL.Get(Id);
            return user;
        }

        [HttpPut("{id}/MoveToWishlist")]
        public IActionResult MoveToWishlist(string id)
        {

            if (GetTokenType()[1] != "User")
            {

                return this.BadRequest(new { success = false, message = "Only Users Allowed" });
            }


            var book = _bookBL.Get(id);

            if (book == null)
            {
                return NotFound();
            }
            var wish = _userBL.ToWishList(book, Get(GetTokenType()[0]));

            return this.Ok(new { success = true, message = "Moved to Wish List" });
        }


    }
}
