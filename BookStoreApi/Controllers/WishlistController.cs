// <auto-generated />
using BussinessLayer.Interfaces;
using CommonLayer.Models;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Cors;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace BookStoreApi.Controllers
{
    [Authorize]
    [Route("api/[controller]")]
    [ApiController]
    [EnableCors("AllowOrigin")]
    public class WishlistController : Controller
    {
        private readonly IBookBL _bookBL;
        private readonly IWishlistBL _wishListBL;
        private readonly IUserBL _userBL;
        public WishlistController(IBookBL _bookBL, IWishlistBL _wishListBL, IUserBL _userBL)
        {
            this._wishListBL = _wishListBL;
            this._userBL = _userBL;
            this._bookBL = _bookBL;
        }

        private List<string> GetTokenType()
        {
            string id = User.FindFirst("Id").Value;
            string type = User.FindFirst("ServiceType").Value;
            List<string> x = new List<string>();
            x.Add(id);
            x.Add(type);
            return x;
        }


        [HttpGet]
        public ActionResult GetWishlistBook()
        {
            if (GetTokenType()[1] != "User")
            {

                return this.BadRequest(new { success = false, message = "Only User Allowed" });
            }
            var wishList = _wishListBL.GetWishList(GetTokenType()[0]);
            return this.Ok(new { success = true, wishList });
        }


        [HttpGet ("Books/{userId}")]
        public IActionResult GetWishlistBooks(String userId)
        {
            if (GetTokenType()[1] != "User")
            {

                return this.BadRequest(new { success = false, message = "Only User Allowed" });
            }
            var wishList = _wishListBL.GetWishListBooks(userId);
            return this.Ok(new { success = true, Data = wishList });
        }

        [HttpPut("{id}/MoveToCart")]
        public IActionResult MoveToCart(string id)
        {
            if (GetTokenType()[1] != "User")
            {

                return this.BadRequest(new { success = false, message = "Only User Allowed" });
            }

            var book = _bookBL.Get(id);

            if (book == null)
            {
                return NotFound();
            }

            _userBL.ToCart(book, Get(GetTokenType()[0]));

            return this.Ok(new { success = true, message = "Moved to Cart" });
        }

        [AllowAnonymous]
        [HttpDelete]
        public IActionResult Delete(string bookId)
        {
            if (GetTokenType()[1] != "User")
            {

                return this.BadRequest(new { success = false, message = "Only User Allowed" });
            }
            var cartBook = _wishListBL.GetWishList(GetTokenType()[0]);
            var book = _bookBL.Get(bookId);

            if (book == null)
            {
                return this.BadRequest(new { success = false, message = "Book notfound" });
            }

            _wishListBL.Remove(bookId, GetTokenType()[0]);

            return this.Ok(new { success = true, message = "Book Deleted" });
        }

        private User Get(string id)
        {
            var user = _userBL.Get(id);
            return user;
        }
    }
}
